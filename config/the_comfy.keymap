// This file was generated from a template. Edit it to match your keyboard. test test
// See https://zmk.dev/docs/development/hardware-integration/new-shield for more instructions.

#include "keys_de.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

&mt {
    flavor = "hold-preferred";
    bindings = <&kp>, <&kp>;

    tapping-term-ms = <250>;
    quick-tap-ms = <150>;
    require-prior-idle-ms = <125>;
};

&lt {
    quick-tap-ms = <200>;
    tapping-term-ms = <250>;
};

/ {
    // Define a default keymap here.
    // See https://zmk.dev/docs/development/hardware-integration/new-shield#default-keymap.

    combos {
        compatible = "zmk,combos";

        ae {
            bindings = <&kp DE_A_UMLAUT>;
            key-positions = <11 18>;
        };

        ue {
            bindings = <&kp DE_U_UMLAUT>;
            key-positions = <18 7>;
        };

        oe {
            bindings = <&kp DE_O_UMLAUT>;
            key-positions = <18 20>;
        };

        boot {
            bindings = <&bootloader>;
            key-positions = <22 33 4 5>;
            require-prior-idle-ms = <500>;
        };

        colon {
            bindings = <&kp DE_COLON>;
            key-positions = <4 3>;
        };

        Col_overkeys {
            bindings = <&kp F13>;
            key-positions = <33 21>;
        };

        Tog_Col {
            bindings = <&to 0>;
            key-positions = <0 9>;
            layers = <1>;
        };

        Tog_QWE {
            bindings = <&to 1>;
            key-positions = <0 9>;
            layers = <0>;
        };

        screenshot {
            bindings = <&kp PRINTSCREEN>;
            key-positions = <27 26>;
        };

        to_col {
            bindings = <&to 0>;
            key-positions = <22 33>;
            layers = <1>;
            require-prior-idle-ms = <500>;
        };

        to_qwe {
            bindings = <&to 1>;
            key-positions = <22 33>;
            layers = <0>;
            require-prior-idle-ms = <500>;
        };

        sym_combo {
            bindings = <&mo 3>;
            key-positions = <14 26>;
            layers = <0>;
            require-prior-idle-ms = <100>;
        };

        sz {
            bindings = <&kp DE_SZ>;
            key-positions = <13 18>;
        };

        num_combo {
            bindings = <&mo 2>;
            key-positions = <13 25>;
            layers = <0>;
            require-prior-idle-ms = <100>;
        };

        sym_combo_2 {
            bindings = <&mo 3>;
            key-positions = <17 29>;
            layers = <0>;
            require-prior-idle-ms = <100>;
        };

        num_combo_2 {
            bindings = <&mo 2>;
            key-positions = <18 30>;
            layers = <0>;
            require-prior-idle-ms = <100>;
        };

        less_than_combo {
            bindings = <&kp DE_LESS_THAN>;
            key-positions = <2 3>;
            timeout-ms = <50>;
            layers = <0>;
        };

        greater_than_combo {
            bindings = <&kp DE_GREATER_THAN>;
            key-positions = <3 4>;
            timeout-ms = <50>;
            layers = <0>;
        };

        backslash_combo {
            bindings = <&kp DE_BACKSLASH>;
            key-positions = <26 27>;
            timeout-ms = <50>;
            layers = <0>;
        };

        slash_combo {
            bindings = <&kp DE_FSLH>;
            key-positions = <24 25>;
            timeout-ms = <50>;
            layers = <0>;
        };

        left_para_combo {
            bindings = <&kp DE_LEFT_PARENTHESIS>;
            key-positions = <5 6>;
            timeout-ms = <50>;
            layers = <0>;
        };

        r_para_combo {
            bindings = <&kp DE_RPAR>;
            key-positions = <6 7>;
            timeout-ms = <50>;
            layers = <0>;
        };

        left_brace_combo {
            bindings = <&kp DE_LBRC>;
            key-positions = <16 17>;
            timeout-ms = <50>;
            layers = <0>;
        };

        right_brace_combo {
            bindings = <&kp DE_RBRC>;
            key-positions = <17 18>;
            timeout-ms = <50>;
            layers = <0>;
        };

        left_bracket_combo {
            bindings = <&kp DE_LEFT_BRACKET>;
            key-positions = <28 29>;
            timeout-ms = <50>;
            layers = <0>;
        };

        right_brckt_combo {
            bindings = <&kp DE_RIGHT_BRACKET>;
            key-positions = <29 30>;
            timeout-ms = <50>;
            layers = <0>;
        };
    };

    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 6 7 16 17 18 28 29 30 8 9 19 20 21 31 32 33>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27>;
            hold-trigger-on-release;
        };

        back_del: back_del {
            compatible = "zmk,behavior-tap-dance";
            label = "BACK_DEL";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DEL>;
        };

        to_col: to_col {
            compatible = "zmk,behavior-tap-dance";
            label = "TO_COL";
            #binding-cells = <0>;
            bindings = <&kp TAB>, <&kp TAB>, <&to 0>;
        };

        to_qwe: to_qwe {
            compatible = "zmk,behavior-tap-dance";
            label = "TO_QWE";
            #binding-cells = <0>;
            bindings = <&kp TAB>, <&kp TAB>, <&to 1>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        COL {
            display-name = "COL";
            bindings = <
              &kp DE_Q            &kp W               &kp F            &kp P                 &kp B                            &kp J       &kp L                 &kp U            &kp DE_Y             &kp TAB
&lt 3 ESCAPE  &hml LEFT_GUI DE_A  &hml LEFT_ALT DE_R  &hml LCTRL DE_S  &hml LEFT_SHIFT DE_T  &kp G                            &kp M       &hmr LEFT_SHIFT DE_N  &hmr RCTRL DE_E  &hmr RIGHT_ALT DE_I  &hmr RIGHT_GUI DE_O  &lt 3 ENTER
&lt 2 BSPC    &kp DE_Z            &kp DE_X            &kp DE_C         &kp DE_D              &kp V                            &kp K       &kp DE_H              &kp DE_COMMA     &kp DE_DOT           &kp DE_MINUS         &lt 1 DELETE
                                  &kp LG(DE_N1)       &kp LG(DE_N2)    &kp ESCAPE            &kp SPACE  &kp TAB    &kp ENTER  &lt 1 BSPC  &mo 4                 &kp LG(DE_N2)    &kp LG(DE_N3)
            >;
        };

        QWE {
            display-name = "QWE";
            bindings = <
        &kp DE_Q            &kp W               &kp E            &kp R                 &kp T                     &kp DE_Y  &kp U                  &kp I            &kp O                &kp DE_SZ
&trans  &hml LEFT_GUI DE_A  &hml LEFT_ALT DE_S  &hml LCTRL DE_D  &hml LEFT_SHIFT DE_F  &kp G                     &kp H     &hmr RIGHT_SHIFT DE_J  &hmr RCTRL DE_K  &hmr RIGHT_ALT DE_L  &hmr LEFT_GUI DE_P  &trans
&trans  &kp DE_Z            &kp DE_X            &kp DE_C         &kp DE_V              &kp B                     &kp N     &kp DE_M               &kp DE_COMMA     &kp DE_DOT           &kp DE_MINUS        &trans
                            &trans              &trans           &trans                &trans  &trans    &trans  &trans    &trans                 &trans           &trans
            >;
        };

        NUM {
            bindings = <
        &kp DE_N1  &kp DE_N2  &kp DE_N3  &kp DE_N4  &kp DE_N5                    &kp DE_N6  &kp DE_N7  &kp DE_N8  &kp DE_N9  &kp N0
&trans  &trans     &trans     &trans     &trans     &trans                       &trans     &kp DE_N4  &kp DE_N5  &kp DE_N6  &kp DE_N0  &trans
&trans  &trans     &trans     &trans     &trans     &trans                       &trans     &kp DE_N1  &kp DE_N2  &kp DE_N3  &trans     &trans
                   &trans     &trans     &trans     &trans     &trans    &trans  &trans     &trans     &trans     &trans
            >;

            label = "NUM";
        };

        SYM {
            bindings = <
        &kp DE_SQT          &kp DE_DQT    &kp DE_LESS_THAN  &kp DE_GREATER_THAN  &kp DE_PERCENT                     &kp DE_TILDE    &kp DE_LEFT_PARENTHESIS  &kp DE_RIGHT_PARENTHESIS  &kp DE_AMPERSAND  &kp DE_UNDER
&trans  &kp DE_EXCLAMATION  &kp DE_MINUS  &kp DE_PLUS       &kp DE_EQUAL         &kp DE_HASH                        &kp DE_GRAVE    &kp DE_LEFT_BRACE        &kp DE_RIGHT_BRACE        &kp DE_PIPE       &kp DE_COLON  &trans
&trans  &kp DE_CARET        &kp DE_SLASH  &kp DE_ASTERISK   &kp DE_BACKSLASH     &kp DE_QUESTION                    &kp DE_AT_SIGN  &kp DE_LEFT_BRACKET      &kp DE_RIGHT_BRACKET      &kp DE_DOLLAR     &kp DE_MINUS  &trans
                            &trans        &trans            &trans               &trans           &trans    &trans  &trans          &trans                   &trans                    &trans
            >;

            label = "SYM";
        };

        NAV {
            bindings = <
        &kp N1    &kp N2         &kp N3         &kp N4     &kp N5                    &trans  &kp HOME         &kp PG_DN          &kp PG_UP             &kp END
&trans  &kp LGUI  &kp LALT       &kp LCTRL      &kp LSHFT  &trans                    &trans  &mt LSHIFT LEFT  &kp DOWN           &kp UP                &mt RIGHT_GUI RIGHT  &trans
&trans  &trans    &trans         &trans         &trans     &trans                    &trans  &kp LG(DE_SZ)    &kp LG(LS(DE_SZ))  &kp LG(LS(DE_ACUTE))  &kp LG(DE_ACUTE)     &trans
                  &kp LG(DE_N4)  &kp LG(DE_N5)  &trans     &trans  &trans    &trans  &trans  &trans           &kp LG(DE_N5)      &kp LG(DE_N6)
            >;

            label = "NAV";
        };
    };
};
